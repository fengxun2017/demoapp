message(STATUS  "in helper-func.cmake, CMAKE_CURRENT_LIST_DIR: ${CMAKE_CURRENT_LIST_DIR}")

# if(NOT MOD_LIST_TRUNCATED)
#     file(WRITE "${NVOS_MOD_LIST}")
#     set(MOD_LIST_TRUNCATED TRUE)
# endif()

function(app_add_global_definition definition)
    target_compile_definitions(${PROJECT_NAME} PUBLIC ${definition})
    message("Added public compile definition ${definition}")
endfunction(app_add_global_definition definition)

function(app_include_module)
    cmake_parse_arguments(APP_MOD
                          ""
                          "NAME;TYPE;PATH"
                          "DEFINE;CFG_PATH"
                          ${ARGN})
    # Validate arguments
    if(NOT APP_MOD_NAME)
        message(FATAL_ERROR "NAME not specified in app_include_module")
    endif()
    if(NOT APP_MOD_TYPE)
        message(FATAL_ERROR "TYPE not specified in app_include_module for ${APP_MOD_NAME}")
    endif()
    if(NOT ${APP_MOD_TYPE}_BASE_PATH)
        message(FATAL_ERROR "Invalid TYPE specified in app_include_module for ${APP_MOD_NAME}")
    endif()
    if(NOT APP_MOD_PATH)
        message(FATAL_ERROR "PATH not specified in app_include_module for ${APP_MOD_NAME}")
    endif()

    # Check if the path to the module exists
    if(EXISTS ${${APP_MOD_TYPE}_BASE_PATH}/${APP_MOD_PATH}/CMakeLists.txt)

        add_subdirectory(${${APP_MOD_TYPE}_BASE_PATH}/${APP_MOD_PATH} ${CMAKE_CURRENT_BINARY_DIR}/${APP_MOD_NAME}_build)

    else()
        # Flow will reach here under two cases
        # 1. The path being included in yet to be generated by a code generator - Skip and continue
        # 2. This path is not generated by a code generator - Raise an error
        if(${STRICT_PATH_CHECK} EQUAL 1)
            message(FATAL_ERROR "Invalid PATH specified in app_include_module for ${APP_MOD_NAME}:${APP_MOD_TYPE}:${${APP_MOD_TYPE}_BASE_PATH}/${APP_MOD_PATH}")
        endif()
    endif()
    # file(APPEND ${APP_MOD_LIST} "${APP_MOD_NAME},${${APP_MOD_TYPE}_BASE_PATH}/${APP_MOD_PATH}\n")

    # Check whether a config path is provided and it exists
    if(APP_MOD_CFG_PATH)
        foreach(cfg_path_var ${APP_MOD_CFG_PATH})
            if(EXISTS ${${APP_MOD_TYPE}_CFG_BASE_PATH}/${cfg_path_var}/CMakeLists.txt)
                # All config files will fall within the ECU scope and hence a build directory does not need to be specified
                add_subdirectory(${${APP_MOD_TYPE}_CFG_BASE_PATH}/${cfg_path_var})
            else()
                # Flow will reach here under two cases
                # 1. The path being included in yet to be generated by a code generator - Skip and continue
                # 2. This path is not generated by a code generator - Raise an error
                if(${STRICT_PATH_CHECK} EQUAL 1)
                    message(FATAL_ERROR "Invalid CFG_PATH ${${APP_MOD_TYPE}_CFG_BASE_PATH}/${cfg_path_var} specified in app_include_module for ${APP_MOD_NAME}")
                endif()
            endif()
            
            # file(APPEND ${APP_MOD_LIST} "${APP_MOD_NAME},${${APP_MOD_TYPE}_CFG_BASE_PATH}/${cfg_path_var}\n")
        endforeach(cfg_path_var)
    endif()

    # Define compile definition if it exists
    if (APP_MOD_DEFINE)
        foreach(define_var ${APP_MOD_DEFINE})
            app_add_global_definition(${define_var})
        endforeach(define_var)
    endif()


endfunction(app_include_module)

# Add a custom target to clean the outputs of all configured code generators
add_custom_target(code_gen_clean
                  COMMAND rm -rf ${GEN_BASE_PATH}
                  COMMENT "Cleaning outputs of all code generators")

# Add a custom target to run all configured code generators
add_custom_target(code_gen
                  COMMENT "Running all code generators")

function(app_include_generator)
    cmake_parse_arguments(APP_GEN
                          ""
                          "NAME;WORKING_DIRECTORY;OUTPUT_DIRECTORY"
                          "ENV;COMMAND;SCRIPT_NAME;ARGS;DEPENDS"
                          ${ARGN})
    # Validate arguments
    if(NOT APP_GEN_NAME)
        message(FATAL_ERROR "NAME not specified in app_include_generator")
    endif()
    if(NOT APP_GEN_WORKING_DIRECTORY)
        message(FATAL_ERROR "WORKING_DIRECTORY not specified in app_include_generator for ${APP_GEN_NAME}")
    endif()
    if(NOT APP_GEN_OUTPUT_DIRECTORY)
        message(FATAL_ERROR "OUTPUT_DIRECTORY not specified in app_include_generator for ${APP_GEN_NAME}")
    endif()
    if(NOT APP_GEN_COMMAND)
        message(FATAL_ERROR "COMMAND not specified in app_include_generator for ${APP_GEN_NAME}")
    endif()
    if(NOT APP_GEN_SCRIPT_NAME)
        message(FATAL_ERROR "SCRIPT_NAME not specified in app_include_generator for ${APP_GEN_NAME}")
    endif()

    # Create custom clean target for the generator
    add_custom_target(${APP_GEN_NAME}_clean
                    COMMAND rm -rf ${GEN_BASE_PATH}/${APP_GEN_OUTPUT_DIRECTORY}
                    COMMENT "Cleaning ${APP_GEN_NAME} generator")

    # Create custom generate target for the generator
    # APP_GEN_ENV is not validated above because even in it's absence cmake -E env falls through without any side effects
    # Avoiding this validation, on the other hand, eliminiates the need to define two variants of add_custom_target for the generator
    add_custom_target(${APP_GEN_NAME}
                    COMMAND ${CMAKE_COMMAND} -E env ${APP_GEN_ENV}
                    ${APP_GEN_COMMAND} ${APP_GEN_SCRIPT_NAME} ${APP_GEN_ARGS}
                    WORKING_DIRECTORY ${APP_GEN_WORKING_DIRECTORY}
                    COMMENT "Running ${APP_GEN_NAME} generator")

    # Check whether the generator has dependencies on other generators
    if(APP_GEN_DEPENDS)
        add_dependencies(${APP_GEN_NAME} ${APP_GEN_DEPENDS})
    endif()

    # Add the generator as a dependency for code_gen
    # code_gen aggregates all the generators under one target
    add_dependencies(code_gen ${APP_GEN_NAME})

endfunction(app_include_generator)

